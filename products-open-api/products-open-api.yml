openapi: "3.0.3"
info:
  title: Products RESTFUL API
  description: This is RESTFUL API product documentation by Yadi Apriyadi
  termsOfService: https://www.google.com
  contact:
    name: Yadi Apriyadi
    url: https://linkedin.com/in/yadi-apriyadi
    email: galihbatu098@gmail.com
  license:
    name: MIT License
    url: https://github.com/YadBro/learn-open-api/blob/master/products-open-api/LICENSE
  version: "1"
paths:
  /auth/register:
    post:
      tags:
        - "Auth"
      summary: Register for create Authentication
      description: Register
      requestBody:
        $ref: "#/components/requestBodies/UserBody"
      responses:
        "200":
          $ref: "#/components/responses/200register"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: Login for Authentication
      description: Login
      requestBody:
        $ref: "#/components/requestBodies/UserBody"
      responses:
        "200":
          $ref: "#/components/responses/200login"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
  /products:
    get:
      security:
        - usersAuth: []
      tags:
        - "Products"
      summary: Get all data products
      description: Return all data products
      parameters:
        - $ref: "#/components/parameters/QueryName"
        - $ref: "#/components/parameters/QueryId"
      responses:
        "200":
          $ref: "#/components/responses/200alldata"
        "404":
          $ref: "#/components/responses/404"
    post:
      security:
        - usersAuth: []
      tags:
        - "Products"
      summary: Create new data product
      description: Return your current new data product
      requestBody:
        $ref: "#/components/requestBodies/ProductAddBody"
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
  /products/{productsId}:
    put:
      security:
        - usersAuth: []
      tags:
        - "Products"
      summary: Update data product
      description: Return your current update data product
      parameters:
        - $ref: "#/components/parameters/ParamId"
      requestBody:
        $ref: "#/components/requestBodies/ProductUpdateBody"
      responses:
        "200":
          $ref: "#/components/responses/200update"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
    delete:
      security:
        - usersAuth: []
      tags:
        - "Products"
      summary: Delete product
      description: Return boolean
      parameters:
        - $ref: "#/components/parameters/ParamId"
      responses:
        "200":
          $ref: "#/components/responses/200delete"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
servers:
  - url: http://{environment}/api/v1
    description: Products API sample dev environment
    variables:
      environment:
        default: localhost:5000
        description: Server environment
        enum:
          - "localhost:5000"
          - "development:3000"
externalDocs:
  url: https://www.youtube.com/c/yadbrochannel
  description: Youtube YadBro Channel
components:
  parameters:
    ProductsId:
      name: productsId
      in: path
      required: true
      description: ID of products is needs for get one data
      schema:
        type: string
      examples:
        javascript:
          description: Example productsId in javascript
          value: /1
        go-lang:
          description: Example productsId in GoLang
          value: /1
    QueryName:
      name: name
      in: query
      required: false
      description: Query name for get products by name
      schema:
        type: string
      examples:
        example 1:
          description: Example 1
          value: /?name=bakso
        example 2:
          description: Example 2 (combine with query id)
          value: /?name=bakso&id=2
        with spaces:
          description: Example query name with spaces see the url-encode docs [here](https://www.urlencoder.org/)
          value: /?name=mie%20ayam
    ParamId:
      name: id
      in: path
      required: true
      description: Parameter product id
      schema:
        type: string
      examples:
        example 1:
          description: Example bakso param id
          value: /1
    QueryId:
      name: id
      in: query
      required: false
      description: Query product id
      schema:
        type: string
      examples:
        example 1:
          description: Example bakso query id
          value: /?id=1
        example 2:
          description: Example 2 (combine with query name)
          value: /?id=2&name=bakso
  schemas:
    SchemaProduct:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 1
          required:
            - "true"
        stock:
          type: number
          minLength: 1
          required:
            - "true"
    SchemaUser:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          minLength: 3
          required:
            - "true"
        password:
          type: string
          minLength: 6
          required:
            - "true"
        token:
          type: string
          required:
            - "false"
    SchemaArrayUsersList:
      type: array
      items:
        $ref: "#/components/schemas/SchemaUser"
    SchemaArrayProductsList:
      type: array
      items:
        $ref: "#/components/schemas/SchemaProduct"
    SchemaBad:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
  examples:
    ExampleSuccessAllData:
      summary: "200"
      value:
        - id: 1
          name: bakso
          stock: 12
        - id: 2
          name: mie ayam
          stock: 1
        - id: 3
          name: pangsit
          stock: 100
    ExampleDeleteProductBody:
      summary: "200"
      value:
        id: 5
    ExampleUpdateProductBody:
      summary: "200"
      value:
        name: bakso Update
        stock: 99
    ExampleAddProductBody:
      summary: "200"
      value:
        name: bakso
        stock: 12
    ExampleSuccess:
      summary: "200"
      value:
        id: 1
        name: bakso
        stock: 12
    ExampleSuccessUpdate:
      summary: "200"
      value:
        id: 1
        name: bakso update
        stock: 99
    ExampleSuccessDelete:
      summary: "200"
      value:
        success: true
    ExampleAuthBody:
      summary: "200"
      value:
        username: yadiganteng32
        password: thesecretpassword
    ExampleSuccessRegister:
      summary: "200"
      value:
        username: yadiganteng32
    ExampleSuccessLogin:
      summary: "200"
      value:
        username: yadiganteng32
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    ExampleNotFound:
      summary: "404"
      value:
        status: failed
        message: data not found.
    ExampleBadRequest:
      summary: "400"
      value:
        status: failed
        message: There was problem with your data request body (e.g type, field, etc.).
  securitySchemes:
    usersAuth:
      description: Authentication for products RESTFUL API
      type: apiKey
      in: header
      name: Bearer
  responses:
    "200alldata":
      description: success get data products.
      content:
        "application/json":
          schema:
            type: array
            $ref: "#/components/schemas/SchemaArrayUsersList"
          examples:
            responseNotFound:
              $ref: "#/components/examples/ExampleSuccessAllData"
    "200":
      description: success get / create data product.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaUser"
          examples:
            responseSuccess:
              $ref: "#/components/examples/ExampleSuccess"
    "200update":
      description: success update data product.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaUser"
          examples:
            responseSuccess:
              $ref: "#/components/examples/ExampleSuccessUpdate"
    "200delete":
      description: success delete data product.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaUser"
          examples:
            responseSuccess:
              $ref: "#/components/examples/ExampleSuccessDelete"
    "200register":
      description: success register.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaUser"
          examples:
            responseSuccess:
              $ref: "#/components/examples/ExampleSuccessRegister"
    "200login":
      description: success login.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaUser"
          examples:
            responseSuccess:
              $ref: "#/components/examples/ExampleSuccessLogin"
    "400":
      description: Bad Request.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaBad"
          examples:
            responseNotFound:
              $ref: "#/components/examples/ExampleBadRequest"
    "404":
      description: data not found.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaBad"
          examples:
            responseNotFound:
              $ref: "#/components/examples/ExampleNotFound"
  requestBodies:
    UserBody:
      description: User request body.
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaUser"
          examples:
            reqUserBody:
              $ref: "#/components/examples/ExampleAuthBody"
    ProductAddBody:
      description: Product request body.
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaProduct"
          examples:
            reqUserBody:
              $ref: "#/components/examples/ExampleAddProductBody"
    ProductUpdateBody:
      description: Product request body.
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaProduct"
          examples:
            reqUserBody:
              $ref: "#/components/examples/ExampleUpdateProductBody"
    ProductDeleteBody:
      description: Product request body.
      required: true
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/SchemaProduct"
          examples:
            reqUserBody:
              $ref: "#/components/examples/ExampleDeleteProductBody"